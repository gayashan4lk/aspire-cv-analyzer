@page "/upload-cv"
@inject HttpClient Http

<h3 class="text-center my-4">Upload Your CV</h3>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg">
                <div class="card-body">
                    <form>
                        <div class="form-group mb-3">
                            <label for="cvFile" class="form-label">Upload CV</label>
                            <InputFile OnChange="OnFileChange" accept=".pdf,.doc,.docx" class="form-control" />
                        </div>
                        <div class="d-grid">
                            <button @onclick="SubmitCv" class="btn btn-primary" disabled="@isDisabled">Submit</button>
                        </div>
                    </form>
                    <div class="mt-3 text-center">
                        <span class="text-muted" style="font-size: 0.9em">@statusMessage</span>
                    </div>
                    <div class="mt-3 text-center">
                        <span class="text-muted" style="font-size: 0.9em">File selected: @selectedFile?.Name</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IBrowserFile selectedFile;
    private string statusMessage = string.Empty;
    private bool isDisabled = true;

    private void OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        // Debugging output to the console
        Console.WriteLine($"File selected: {selectedFile?.Name}");

        // Update the isDisabled state based on the file selection
        isDisabled = selectedFile == null;

        // Update status message to notify user
        statusMessage = selectedFile != null ? $"Selected file: {selectedFile.Name}" : string.Empty;

        // Log the state of isDisabled
        Console.WriteLine($"isDisabled: {isDisabled}");

        StateHasChanged(); // Ensure the component re-renders
    }

    private async Task SubmitCv()
    {
        if (selectedFile != null)
        {
            try
            {
                using var content = new MultipartFormDataContent();
                using var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024)); // Max size 100MB
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "file", selectedFile.Name);

                var response = await Http.PostAsync("api/cv/analyze", content);

                if (response.IsSuccessStatusCode)
                {
                    statusMessage = "CV uploaded successfully!";
                }
                else
                {
                    statusMessage = "Failed to upload CV. Please try again.";
                }
            }
            catch (Exception ex)
            {
                statusMessage = $"An error occurred: {ex.Message}";
            }

            // Don't disable the button here, let the user select a new file
            //isDisabled = true;
        }
    }
}
